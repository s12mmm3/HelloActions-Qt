name: Windows
on: 
  # push代码时触发workflow
  push:
    paths:
      - '**'
  pull_request:
    paths:
      - '**'
jobs:
  build:
    name: Build
    # 运行平台， windows-latest目前是windows server 2019 
    # 参考文档 https://github.com/actions/virtual-environments/blob/main/images/win/Windows2019-Readme.md
    runs-on: windows-2019
    strategy:
      # 矩阵配置
      matrix:
        include:
          # 5.15.2
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
            qt_arch_install: msvc2019_64
    env:
      targetName: Test.exe
    # 步骤
    steps:
      - name: cacheQt
        id: WindowsCacheQt
        uses: actions/cache@v1
        with:
          path: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
          key: ${{ runner.os }}-Qt/${{matrix.qt_ver}}/${{matrix.qt_arch}}
      - name: setupQt
        if: steps.WindowsCacheQt.outputs.cache-hit == 'true'
        shell: pwsh
        env:
          QtPath: ../Qt/${{matrix.qt_ver}}/${{matrix.qt_arch_install}}
        run: |
          $qt_Path=${env:QtPath}
          echo "Qt_Dir=$qt_Path" >> "$GITHUB_ENV"
          echo "$qt_Path/bin" >> $GITHUB_PATH
      # 安装Qt
      - name: Install Qt
        if: steps.WindowsCacheQt.outputs.cache-hit != 'true'
        # 使用外部action。这个action专门用来安装Qt
        uses: jurplel/install-qt-action@v3
        with:
          # Version of Qt to install
          version: ${{ matrix.qt_ver }}
          # Target platform for build
          # target: ${{ matrix.qt_target }}
          arch: ${{ matrix.qt_arch }}
          cached: 'false'
          aqtversion: '==2.0.5'
      # 拉取代码
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
      # Conan Install
      - name: Conan Install
        id: conanInstall
        shell: pwsh
        run: |
          pip install conan
          conan -v
          conan profile detect --force
      # Conan Run
      - name: Conan Run
        id: conanRun
        shell: pwsh
        run: |
          conan install .
          ls build/generators/
          build/generators/conanrun.bat
      # CMake Build
      - name: CMake Build
        id: build
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          mkdir build
          cd build
          cmake --version
          cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }} ../
          ls
          echo winSdkDir=%WindowsSdkDir% >> %GITHUB_ENV%
          echo winSdkVer=%WindowsSdkVersion% >> %GITHUB_ENV%
          echo vcToolsInstallDir=%VCToolsInstallDir% >> %GITHUB_ENV%
          echo vcToolsRedistDir=%VCToolsRedistDir% >> %GITHUB_ENV%
      # CMake Install
      - name: CMake Install
        env:
          prefix: ${{ github.workspace }}
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/build
          cmake --build . --target INSTALL --config release
          ls
      # 打包 
      - name: package
        id: package      
        env:
          archiveName: ${{ matrix.qt_ver }}-${{ matrix.qt_target }}-${{ matrix.qt_arch }}
          msvcArch: ${{ matrix.msvc_arch }}          
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/build
          ls
          & ${{ github.workspace }}/scripts/windows-publish.ps1 ${env:archiveName} ${env:targetName}
          # 记录packageName给后续step
          $name = ${env:archiveName}
          echo "::set-output name=packageName::$name"
          ls
      # tag 查询github-Release
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ github.workspace }}/build/output
      # tag 上传Release
      - name: uploadRelease
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/build/${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true 