name: Build and package Qt project with OpenSSL on Windows

on: [push, pull_request]

jobs:
  build:
    runs-on: windows-2019
    strategy:
      matrix:
        include:
          # 5.15.2
          - qt_ver: 5.15.2
            qt_arch: win32_msvc2019
            msvc_arch: x86
          - qt_ver: 5.15.2
            qt_arch: win64_msvc2019_64
            msvc_arch: x64
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          cache: 'true'

      - name: Install Perl
        uses: shogo82148/actions-setup-perl@v1
        with:
          perl-version: 5.32

      - name: Download OpenSSL source code
        run: |
          curl -O https://www.openssl.org/source/openssl-3.1.2.tar.gz
          tar xzf openssl-3.1.2.tar.gz

      - name: Build OpenSSL
        working-directory: openssl-3.1.2
        shell: cmd
        run: |
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" ${{ matrix.msvc_arch }}
          
          perl Configure no-asm --prefix=${{ github.workspace }}\openssl no-shared no-tests
          nmake
          nmake install

      - name: Remove OpenSSL path
        shell: pwsh
        run: |
          $env:Path = $env:Path.Replace("C:\Program Files\OpenSSL", "")

      - name: Set OpenSSL path
        run: |
          echo "OPENSSL_DIR=${{ github.workspace }}\openssl" >> $GITHUB_ENV

      - name: Configure CMake project
        run: |
          mkdir build
          cd build
          cmake --version
          cmake -DCMAKE_INSTALL_PREFIX=${{ github.workspace }} ../ DOPENSSL_ROOT_DIR=${{ github.workspace }}\openssl -DOPENSSL_INCLUDE_DIR=${{ github.workspace }}\openssl\include -DOPENSSL_LIBRARIES=${{ github.workspace }}\openssl\lib -DOPENSSL_USE_STATIC_LIBS=TRUE
          ls

      - name: Build CMake project
        run: |
          cd ${{ github.workspace }}/build
          cmake --build . --target INSTALL --config release
          ls
      # 打包 
      - name: Package
        id: package      
        env:
          archiveName: 'QCloudMusicApi-${{ github.ref_name }}-${{ matrix.qt_ver }}-${{ matrix.qt_arch }}'
        shell: pwsh
        run: |
          cd ${{ github.workspace }}/build
          ls
          Tree output /F

          # 拷贝依赖
          windeployqt --qmldir . --no-translations --compiler-runtime output\bin\QCloudMusicApi.dll
          windeployqt --qmldir . --no-translations --compiler-runtime output\bin\Test.exe
          windeployqt --qmldir . --no-translations --compiler-runtime output\bin\ApiServer.exe
          # 打包zip
          Compress-Archive -Path output\* ${env:archiveName}'.zip'
          Tree output /F

          # 记录packageName给后续step
          $name = ${env:archiveName}
          echo "::set-output name=packageName::$name"
          ls
      # tag 查询github-Release
      # 上传artifacts          
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.package.outputs.packageName }}
          path: ${{ github.workspace }}/build/output
      # tag 上传Release
      - name: Upload Release
        if: startsWith(github.event.ref, 'refs/tags/')
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ${{ github.workspace }}/build/${{ steps.package.outputs.packageName }}.zip
          asset_name: ${{ steps.package.outputs.packageName }}.zip
          tag: ${{ github.ref }}
          overwrite: true 

